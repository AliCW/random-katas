const { binaryToString } = require('../binaryToASCIIConversion');

describe('Given a binary string, return the characters they represent', () => {
    test('Given an empty string, return an empty string', () => {
        const binary = '';
        expect(binaryToString(binary)).toBe('');
    });
    test('Given "01100001", return "a"', () => {
        const binary = '01100001';
        expect(binaryToString(binary)).toBe("a");
    });
    test('Given "01001011010101000100100001011000010000100101100101000101", return "KTHXBYE"', () => {
        const binary = '01001011010101000100100001011000010000100101100101000101';
        expect(binaryToString(binary)).toBe("KTHXBYE");
    });
    test('Given "00110001001100000011000100110001", return "1011"', () => {
        const binary = '00110001001100000011000100110001';
        expect(binaryToString(binary)).toBe('1011');
    });
    test('Given "001111000011101000101001", return "<:)"', () => {
        const binary = '001111000011101000101001';
        expect(binaryToString(binary)).toBe('<:)');
    });
    test(`Given "0101001101110000011000010111001001101011011100110010000001100110011011000110010101110111001011100010111000100000011001010110110101101111011101000110100101101111011011100111001100100000011100100110000101101110001000000110100001101001011001110110100000100001"
            return "Sparks flew.. emotions ran high!"`, () => {
        const binary = `0101001101110000011000010111001001101011011100110010000001100110011011000110010101110111001011100010111000100000011001010110110101101111011101000110100101101111011011100111001100100000011100100110000101101110001000000110100001101001011001110110100000100001`;
        expect(binaryToString(binary)).toBe('Sparks flew.. emotions ran high!');
    });
    test(`Given "00110000001011100110011101101110011000110011001001110010011100000110110000110011011011010110111000110110", 
            return "0.gnc2rpl3mn6"`, () => {
        const binary = '00110000001011100110011101101110011000110011001001110010011100000110110000110011011011010110111000110110';
        expect(binaryToString(binary)).toBe('0.gnc2rpl3mn6');
    });
    test(`Given
            return "!@#$%^&*()QWErtyUIOLdfgbbhnmIKBJKHIUO(?>?<~~~~~)(*&%^98713/-/*-*/"`, () => {
        const binary
        expect(binaryToString(binary)).toBe('!@#$%^&*()QWErtyUIOLdfgbbhnmIKBJKHIUO(?>?<~~~~~)(*&%^98713/-/*-*/');
    });
});

//https://www.codewars.com/kata/5583d268479559400d000064/train/javascript