const {matrix} = require('../twoDimensionalArray');

describe('Given a two dimensional array, change the output so there is a diagonal line of 0s (left to right) where negative numbers are found & a 1 where positives are found', () => {
    test('Confirm the input array is not mutated', () => {
        const array = [[0, 0, 0],[0, 0, 0],[0, 0, 0]];
        matrix(array);
        expect(array).toEqual([[0, 0, 0],[0, 0, 0],[0, 0, 0]]);
    });    
    test(`Given [[-1, 4, -5, -9, 3], [6, -4, -7, 4, -5], [3, 5, 4, -9, -1], [1, 5, -7, -8, -9], [-3, 2, 1, -5, 6]],
    return  [[0, 4, -5, -9, 3], [6, 0, -7, 4, -5], [3, 5, 1, -9, -1], [1, 5, -7, 0, -9], [-3, 2, 1, -5, 1]]`, () => {
        const array = [[-1, 4, -5, -9, 3], [6, -4, -7, 4, -5], [3, 5, 4, -9, -1], [1, 5, -7, -8, -9], [-3, 2, 1, -5, 6]];
        expect(matrix(array)).toEqual([[0, 4, -5, -9, 3], [6, 0, -7, 4, -5], [3, 5, 1, -9, -1], [1, 5, -7, 0, -9], [-3, 2, 1, -5, 1]]);
    });
    test(`Given [[-1, 4, -5, -9, 3],[6, 8, -7, 4, -5],[3, 5, 1, -9, -1],[1, 5, -7, 15, -9],[-3, 2, 1, -5, -6]],
    return [[0, 4, -5, -9, 3],[6, 1, -7, 4, -5],[3, 5, 1, -9, -1],[1, 5, -7, 1, -9],[-3, 2, 1, -5, 0]]`, () => {
        const array = [[-1, 4, -5, -9, 3],[6, 8, -7, 4, -5],[3, 5, 1, -9, -1],[1, 5, -7, 15, -9],[-3, 2, 1, -5, -6]];
        expect(matrix(array)).toEqual([[0, 4, -5, -9, 3],[6, 1, -7, 4, -5],[3, 5, 1, -9, -1],[1, 5, -7, 1, -9],[-3, 2, 1, -5, 0]]);
    });
    test(`Given [[-1, 4, -5, -9, 3, 8],[6, 8, -7, 4, -5, -1],[3, 5, 1, -9, -1, 6],[1, 5, -7, 15, -9, 3],[-3, 2, 1, -5, -6, 0],[8, 2, 0, -2, 4, -5]],
    return [[0, 4, -5, -9, 3, 8],[6, 1, -7, 4, -5, -1],[3, 5, 1, -9, -1, 6],[1, 5, -7, 1, -9, 3],[-3, 2, 1, -5, 0, 0],[8, 2, 0, -2, 4, 0]]`, () => {
        const array = [[-1, 4, -5, -9, 3, 8],[6, 8, -7, 4, -5, -1],[3, 5, 1, -9, -1, 6],[1, 5, -7, 15, -9, 3],[-3, 2, 1, -5, -6, 0],[8, 2, 0, -2, 4, -5]];
        expect(matrix(array)).toEqual([[0, 4, -5, -9, 3, 8],[6, 1, -7, 4, -5, -1],[3, 5, 1, -9, -1, 6],[1, 5, -7, 1, -9, 3],[-3, 2, 1, -5, 0, 0],[8, 2, 0, -2, 4, 0]]);
    });
    test(`Given [[1, 1, -5, 5],[2, -4, 11, 2],[3, 1, -1, 4],[2, -6, 8, 10]],
    return  [[1, 1, -5, 5],[2, 0, 11, 2],[3, 1, 0, 4],[2, -6, 8, 1]]`, () => {
        const array = [[1, 1, -5, 5],[2, -4, 11, 2],[3, 1, -1, 4],[2, -6, 8, 10]];
        expect(matrix(array)).toEqual( [[1, 1, -5, 5],[2, 0, 11, 2],[3, 1, 0, 4],[2, -6, 8, 1]]);
    });
    test(`Given [[ 0, 4, -5, -9, 3 ],[ 6, 0, -7, 4, -5 ],[ 3, 5, 1, -9, -1 ],[ 1, 5, -7, 0, -9 ],[ -3, 2, 1, -5, 0 ]],
    return [[ 1, 4, -5, -9, 3 ], [ 6, 1, -7, 4, -5 ], [ 3, 5, 1, -9, -1 ], [ 1, 5, -7, 1, -9 ], [ -3, 2, 1, -5, 1 ]]`, () => {
        const array = [[ 0, 4, -5, -9, 3 ],[ 6, 0, -7, 4, -5 ],[ 3, 5, 1, -9, -1 ],[ 1, 5, -7, 0, -9 ],[ -3, 2, 1, -5, 0 ]];
        expect(matrix(array)).toEqual([[ 1, 4, -5, -9, 3 ], [ 6, 1, -7, 4, -5 ], [ 3, 5, 1, -9, -1 ], [ 1, 5, -7, 1, -9 ], [ -3, 2, 1, -5, 1 ]]);
    });
    test(`Given [[ 6, 21, 2, -19 ],[ 81, 35, -10, 49 ],[ -2, 50, -86, 53 ],[ -88, -54, -53, 43 ]],
    return [[ 1, 21, 2, -19 ],[ 81, 1, -10, 49 ],[ -2, 50, 0, 53 ],[ -88, -54, -53, 1 ]]`, () => {
        const array = [[ 6, 21, 2, -19 ],[ 81, 35, -10, 49 ],[ -2, 50, -86, 53 ],[ -88, -54, -53, 43 ]];
        expect(matrix(array)).toEqual([[ 1, 21, 2, -19 ],[ 81, 1, -10, 49 ],[ -2, 50, 0, 53 ],[ -88, -54, -53, 1 ]]);
    });
});


  


//https://www.codewars.com/kata/581214d54624a8232100005f/train/javascript